{"version":3,"sources":["webpack:///./node_modules/echarts-liquidfill/index.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFillLayout.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFill.js","webpack:///src/components/page/EChartsComplex.vue","webpack:///./src/components/page/EChartsComplex.vue?ae27","webpack:///./src/components/page/EChartsComplex.vue","webpack:///./node_modules/echarts-liquidfill/src/liquidFillSeries.js","webpack:///./node_modules/echarts-liquidfill/src/liquidFillView.js"],"names":["module","exports","__webpack_require__","echarts","getWaterPositions","x","stage","waveLength","amplitude","Math","PI","graphic","extendShape","type","shape","radius","radiusY","cx","cy","waterLevel","phase","inverse","buildPath","ctx","curves","max","ceil","left","moveTo","waveRight","c","pos","bezierCurveTo","lineTo","closePath","registerVisual","util","curry","EChartsComplex","name","computed","chartLine1","this","$echarts","init","getDom","chartLine2","chartPie","chartLiquid","methods","drawLine1","option","title","assign_default","defaultEchartsOpt","text","grid","top","right","bottom","containLabel","tooltip","trigger","axisPointer","lineStyle","color","backgroundColor","padding","textStyle","extraCssText","legend","orient","xAxis","data","boundaryGap","splitLine","show","interval","axisTick","axisLine","axisLabel","margin","fontSize","yAxis","series","smooth","showSymbol","symbol","symbolSize","areaStyle","normal","LinearGradient","offset","itemStyle","width","setOption","drawLine2","_this","$axios","get","then","res","xAxisMonth","barData","lineData","i","chart","length","push","month","value","ratio","formatter","params","position","nameTextStyle","xAxisIndex","barCategoryGap","dataIndex","emphasis","opacity","yAxisIndex","borderWidth","colorStops","drawPie","dataStyle","label","labelLine","shadowBlur","shadowColor","placeHolderStyle","colors","clockWise","center","hoverAnimation","random","toFixed","itemGap","drawLiquid","rate","resizeChart","_this2","window","addEventListener","resize","mounted","page_EChartsComplex","render","_h","$createElement","_c","_self","attrs","span","staticClass","id","_v","gutter","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__","completeDimensions","extendSeriesModel","visualColorAccessPath","optionUpdated","gridSize","floor","getInitialData","ecModel","dimensions","list","List","initData","defaultOption","period","direction","waveAnimation","animationEasing","animationEasingUpdate","animationDuration","animationDurationUpdate","outline","borderDistance","borderColor","backgroundStyle","insideColor","fontWeight","align","baseline","numberUtil","number","symbolUtil","parsePercent","LiquidLayout","extendChartView","seriesModel","api","group","removeAll","getData","itemModel","getItemModel","getWidth","height","getHeight","size","min","outlineDistance","outlineBorderWidth","showOutline","outterRadius","innerRadius","paddingRadius","isFillContainer","getOutline","style","lineWidth","add","wavePath","strokePath","getPath","setStyle","getModel","getItemStyle","fill","z2","fillPath","stroke","Group","getBackground","oldData","_data","waves","r","isForClipping","indexOf","path","makePath","slice","bouding","getBoundingRect","w","h","BoundingRect","y","createSymbol","Circle","outlinePath","getWave","idx","isInverse","oldWave","radiusX","itemStyleModel","normalStyle","seriesColor","wave","_waterLevel","hoverStyle","setHoverStyle","clip","setClipPath","setWaveAnimation","maxSpeed","speed","cnt","count","defaultSpeed","phaseOffset","console","error","animate","when","during","dirty","start","diff","initProps","setItemGraphicEl","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","attr","hasOwnProperty","styleAttrs","updateProps","useStyle","clipPath","remove","execute","labelModel","textOption","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","isNaN","formatLabel","textAlign","textVerticalAlign","silent","outsideTextRect","Rect","setText","insideTextRect","insColor","textFill","boundingCircle","CompoundPath","paths","getText","dispose"],"mappings":"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","file":"static/js/5.720fcf5134f70f59d520.js","sourcesContent":["module.exports = require('./src/liquidFill');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts-liquidfill/index.js\n// module id = +jab\n// module chunks = 5","var echarts = require('echarts/lib/echarts');\n\nmodule.exports = echarts.graphic.extendShape({\n    type: 'ec-liquid-fill',\n\n    shape: {\n        waveLength: 0,\n        radius: 0,\n        radiusY: 0,\n        cx: 0,\n        cy: 0,\n        waterLevel: 0,\n        amplitude: 0,\n        phase: 0,\n        inverse: false\n    },\n\n    buildPath: function (ctx, shape) {\n        if (shape.radiusY == null) {\n            shape.radiusY = shape.radius;\n        }\n\n        /**\n         * We define a sine wave having 4 waves, and make sure at least 8 curves\n         * is drawn. Otherwise, it may cause blank area for some waves when\n         * wave length is large enough.\n         */\n        var curves = Math.max(\n            Math.ceil(2 * shape.radius / shape.waveLength * 4) * 2,\n            8\n        );\n\n        // map phase to [-Math.PI * 2, 0]\n        while (shape.phase < -Math.PI * 2) {\n            shape.phase += Math.PI * 2;\n        }\n        while (shape.phase > 0) {\n            shape.phase -= Math.PI * 2;\n        }\n        var phase = shape.phase / Math.PI / 2 * shape.waveLength;\n\n        var left = shape.cx - shape.radius + phase - shape.radius * 2;\n\n        /**\n         * top-left corner as start point\n         *\n         * draws this point\n         *  |\n         * \\|/\n         *  ~~~~~~~~\n         *  |      |\n         *  +------+\n         */\n        ctx.moveTo(left, shape.waterLevel);\n\n        /**\n         * top wave\n         *\n         * ~~~~~~~~ <- draws this sine wave\n         * |      |\n         * +------+\n         */\n        var waveRight = 0;\n        for (var c = 0; c < curves; ++c) {\n            var stage = c % 4;\n            var pos = getWaterPositions(c * shape.waveLength / 4, stage,\n                shape.waveLength, shape.amplitude);\n            ctx.bezierCurveTo(pos[0][0] + left, -pos[0][1] + shape.waterLevel,\n                pos[1][0] + left, -pos[1][1] + shape.waterLevel,\n                pos[2][0] + left, -pos[2][1] + shape.waterLevel);\n\n            if (c === curves - 1) {\n                waveRight = pos[2][0];\n            }\n        }\n\n        if (shape.inverse) {\n            /**\n             * top-right corner\n             *                  2. draws this line\n             *                          |\n             *                       +------+\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       ~~~~~~~~\n             */\n            ctx.lineTo(waveRight + left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n        else {\n            /**\n             * top-right corner\n             *\n             *                       ~~~~~~~~\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       +------+\n             *                          ^\n             *                          |\n             *                  2. draws this line\n             */\n            ctx.lineTo(waveRight + left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n\n        ctx.closePath();\n    }\n});\n\n\n\n/**\n * Using Bezier curves to fit sine wave.\n * There is 4 control points for each curve of wave,\n * which is at 1/4 wave length of the sine wave.\n *\n * The control points for a wave from (a) to (d) are a-b-c-d:\n *          c *----* d\n *     b *\n *       |\n * ... a * ..................\n *\n * whose positions are a: (0, 0), b: (0.5, 0.5), c: (1, 1), d: (PI / 2, 1)\n *\n * @param {number} x          x position of the left-most point (a)\n * @param {number} stage      0-3, stating which part of the wave it is\n * @param {number} waveLength wave length of the sine wave\n * @param {number} amplitude  wave amplitude\n */\nfunction getWaterPositions(x, stage, waveLength, amplitude) {\n    if (stage === 0) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     amplitude],\n            [x + waveLength / 4,                   amplitude]\n        ];\n    }\n    else if (stage === 1) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n    else if (stage === 2) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, -amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     -amplitude],\n            [x + waveLength / 4,                   -amplitude]\n        ]\n    }\n    else {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            -amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            -amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts-liquidfill/src/liquidFillLayout.js\n// module id = 4GYk\n// module chunks = 5","var echarts = require('echarts/lib/echarts');\n\nrequire('./liquidFillSeries');\nrequire('./liquidFillView');\n\n\necharts.registerVisual(\n    echarts.util.curry(\n        require('echarts/lib/visual/dataColor'), 'liquidFill'\n    )\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts-liquidfill/src/liquidFill.js\n// module id = 7FPp\n// module chunks = 5","<template>\n  <div>\n    <el-row>\n      <el-col :span=\"24\">\n        <div id=\"line1\" class=\"chart\"></div>\n      </el-col>\n    </el-row>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <div id=\"liquid\" class=\"chart\"></div>\n      </el-col>\n      <el-col :span=\"8\">\n        <div id=\"line2\" class=\"chart\"></div>\n      </el-col>\n      <el-col :span=\"8\">\n        <div id=\"pie\" class=\"chart\"></div>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\n  import Util from '@/assets/js/util';\n  import 'echarts-liquidfill';\n  export default {\n    name: \"EChartsComplex\",\n    computed: {\n      chartLine1() {\n\n        return this.$echarts.init(Util.getDom('line1'));\n      },\n      chartLine2() {\n\n        return this.$echarts.init(Util.getDom('line2'))\n      },\n      chartPie() {\n\n         return this.$echarts.init(Util.getDom('pie'))\n      },\n      chartLiquid() {\n\n        return this.$echarts.init(Util.getDom('liquid'))\n      },\n    },\n    methods: {\n      drawLine1()\n      {\n\n        let title = \"今日和昨日访问量\";\n        let option = {\n          title: Object.assign({}, Util.defaultEchartsOpt.title, {text: title}),\n          grid: {\n            top: 60,\n            left: 60,\n            right: 80,\n            bottom: 20,\n            containLabel: true\n          },\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              lineStyle: {\n                color: '#ddd'\n              }\n            },\n            backgroundColor: 'rgba(255,255,255,1)',\n            padding: [5, 10],\n            textStyle: {\n              color: '#999',\n            },\n            extraCssText: 'box-shadow: 0 0 5px rgba(0,0,0,0.3)'\n          },\n          legend: {\n            top: 15,\n            right: 20,\n            orient: 'vertical',\n            textStyle: {\n              color: \"#666\"\n            }\n          },\n          xAxis: {\n            type: 'category',\n            data: ['00:00','2:00','4:00','6:00','8:00','10:00','12:00','14:00','16:00','18:00','20:00',\"22:00\"],\n            boundaryGap: false,\n            splitLine: {\n              show: false,\n              interval: 'auto',\n              lineStyle: {\n                color: ['#D4DFF5']\n              }\n            },\n            axisTick: {\n              show: false\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#999'\n              }\n            },\n            axisLabel: {\n              margin: 10,\n              textStyle: {\n                fontSize: 14\n              }\n            }\n          },\n          yAxis: {\n            type: 'value',\n            splitLine: {\n              lineStyle: {\n                color: ['#D4DFF5']\n              }\n            },\n            axisTick: {\n              show: false\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#999'\n              }\n            },\n            axisLabel: {\n              margin: 10,\n              textStyle: {\n                fontSize: 14\n              }\n            }\n          },\n          series: [{\n            name: '今日',\n            type: 'line',\n            smooth: true,\n            showSymbol: false,\n            symbol: 'circle',\n            symbolSize: 4,\n            data: ['1200', '1400', '1008', '1411', '1026', '1288', '1300', '800', '1100', '1000', '1118', '1322'],\n            areaStyle: {\n              normal: {\n                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                  offset: 0,\n                  color: 'rgba(199, 237, 250,0.5)'\n                }, {\n                  offset: 1,\n                  color: 'rgba(199, 237, 250,0.2)'\n                }], false)\n              }\n            },\n            itemStyle: {\n              normal: {\n                color: 'rgba(154, 116, 179, 0.7)'\n              }\n            },\n            lineStyle: {\n              normal: {\n                width: 2\n              }\n            }\n          }, {\n            name: '昨日',\n            type: 'line',\n            smooth: true,\n            showSymbol: false,\n            symbol: 'circle',\n            symbolSize: 4,\n            data: ['1200', '1400', '808', '811', '626', '488', '1600', '1100', '500', '300', '1998', '822'],\n            areaStyle: {\n              normal: {\n                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                  offset: 0,\n                  color: 'rgba(216, 244, 247,1)'\n                }, {\n                  offset: 1,\n                  color: 'rgba(216, 244, 247,1)'\n                }], false)\n              }\n            },\n            itemStyle: {\n              normal: {\n                color: 'rgba(126, 237, 238, 0.7)'\n              }\n            },\n            lineStyle: {\n              normal: {\n                width: 2\n              }\n            }\n          }]\n        };\n        this.chartLine1.setOption(option);\n        return this;\n      },\n      drawLine2() {\n\n        this.$axios.get('/chart-complex/line2').then(res => {\n\n          let data = res.data;\n          let xAxisMonth = [], barData = [], lineData = [];\n          for (let i = 0; i < data.chart.length; i++) {\n\n            xAxisMonth.push(data.chart[i].month + '月');\n            barData.push({\n              \"name\": xAxisMonth[i],\n              \"value\": data.chart[i].value\n            });\n            lineData.push({\n              \"name\": xAxisMonth[i],\n              \"value\": data.chart[i].ratio\n            });\n          }\n\n          let option = {\n            title: Object.assign({}, Util.defaultEchartsOpt.title, {text: \"训练月统计\"}),\n            grid: {\n              top: 45,\n              left: 20,\n              right: 20,\n              bottom: 0,\n              containLabel: true\n            },\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {\n                type: 'none'\n              },\n              formatter: function (params) {\n                return params[0][\"data\"].name + \"<br/>\" + '训练人次: ' + params[1][\"data\"].value + \"<br/>\" + '合格率: ' + params[0][\"data\"].value;\n              }\n            },\n            xAxis: [\n              {\n                type: 'category',\n                show: false,\n                data: xAxisMonth,\n                axisLabel: {\n                  textStyle: {\n                    color: '#b6b5ab'\n                  }\n                }\n              },\n              {\n                type: 'category',\n                position: \"bottom\",\n                data: xAxisMonth,\n                boundaryGap: true,\n                axisTick: {\n                  show: false\n                },\n                axisLine: {\n                  show: false\n                },\n                axisLabel: {\n                  textStyle: {\n                    color: '#b6b5ab'\n                  }\n                }\n              }\n            ],\n            yAxis: [\n              {\n                show: true,\n                offset: 52,\n                splitLine: {\n                  show: false,\n                  lineStyle: {\n                    color: \"rgba(255,255,255,0.2)\"\n                  }\n                },\n                axisTick: {\n                  show: false\n                },\n                axisLine: {\n                  show: true\n                },\n                axisLabel: {\n                  show: true,\n                  color: '#b6b5ab'\n                }\n              },\n              {\n                show: false,\n                type: \"value\",\n                name: \"合格率(%)\",\n                nameTextStyle: {\n                  color: '#ccc'\n                },\n                axisLabel: {\n                  color: '#ccc'\n                },\n                splitLine: {\n                  show: false\n                },\n                axisLine: {\n                  show: false\n                },\n                axisTick: {\n                  show: false\n                }\n              }\n            ],\n            color: ['#e54035'],\n            series: [\n              {\n                name: '训练人次',\n                type: 'pictorialBar',\n                xAxisIndex: 1,\n                barCategoryGap: '-80%',\n                symbol: 'path://d=\"M150 50 L130 130 L170 130  Z\"',\n                itemStyle: {\n                  normal: {\n                    color: function (params) {\n\n                      let colorList = [\n                        'rgba(13,177,205,0.8)', 'rgba(29,103,182,0.6)',\n                        'rgba(13,177,205,0.8)', 'rgba(29,103,182,0.6)',\n                        'rgba(13,177,205,0.8)', 'rgba(29,103,182,0.6)'\n                      ];\n                      return colorList[params.dataIndex];\n                    }\n                  },\n                  emphasis: {\n                    opacity: 1\n                  }\n                },\n                data: barData,\n              },\n              {\n                symbol: 'image://static/chart-icon.png',\n                symbolSize: 42,\n                name: \"完成率\",\n                type: \"line\",\n                yAxisIndex: 1,\n                data: lineData,\n                itemStyle: {\n                  normal: {\n                    borderWidth: 5,\n                    color: {\n                      colorStops: [{\n                        offset: 0,\n                        color: '#821eff'\n                      },\n\n                        {\n                          offset: 1,\n                          color: '#204fff'\n                        }\n                      ],\n                    }\n                  }\n                }\n              }\n            ]\n          };\n          this.chartLine2.setOption(option);\n        });\n        return this;\n      },\n      drawPie() {\n\n        let dataStyle = {\n          normal: {\n            label: {\n              show: false\n            },\n            labelLine: {\n              show: false\n            },\n            shadowBlur: 40,\n            shadowColor: 'rgba(40, 40, 40, 0.5)'\n          }\n        };\n        let placeHolderStyle = {\n          normal: {\n            color: 'rgba(0,0,0,0)',\n            label: {\n              show: false\n            },\n            labelLine: {\n              show: false\n            }\n          },\n          emphasis: {\n            color: 'rgba(0,0,0,0)'\n          }\n        };\n        // 5个圆环的样式\n        let series = [];\n        let colors = ['#85b6b2', '#6d4f8d','#cd5e7e', '#e38980','#f7db88'];\n        for (let i = 0; i < 5; i++) {\n\n          series.push({\n            name: `产品${i + 1}`,\n            type: 'pie',\n            clockWise: false,\n            center: [\"50%\", \"56%\"],\n            radius: [110 - i * 20, 130 - i * 20],\n            itemStyle: dataStyle,\n            hoverAnimation: false,\n            data: [\n              {\n                value: (Math.random() * 100).toFixed(2),\n                name: `产品${i + 1}`,\n                itemStyle: {\n                  color: colors[i]\n                }\n              },\n              {\n                value: (Math.random() * 100).toFixed(2),\n                name:'',\n                itemStyle : placeHolderStyle\n              }\n            ]\n          });\n        }\n\n        let option = {\n          title: Object.assign({}, Util.defaultEchartsOpt.title, {text: \"多产品完成度\"}),\n          tooltip : {\n            show: true,\n            formatter: \"{a} <br/>完成度 : {d}%\"\n          },\n          color: colors,\n          legend: {\n            itemGap: 12,\n            left: 20,\n            top: 50,\n            textStyle: {\n              color: \"#666\"\n            }\n          },\n          series\n        };\n\n        this.chartPie.setOption(option);\n        return this;\n      },\n      drawLiquid() {\n\n        let rate = Math.random().toFixed(2);\n        this.chartLiquid.setOption({\n          title: Object.assign({}, Util.defaultEchartsOpt.title, {text: \"项目总完成度\"}),\n          series: [{\n            type: 'liquidFill',\n            data: [rate > 0.6 ? rate : 0.6, 0.5, 0.4, 0.3],\n            radius: \"70%\",\n            center: [\"50%\", \"55%\"],\n          }]\n        });\n        return this;\n      },\n      resizeChart() {\n\n        window.addEventListener(\"resize\", () => {\n\n          this.chartLine1.resize();\n          this.chartLine2.resize();\n          this.chartPie.resize();\n          this.chartLiquid.resize();\n        });\n      }\n    },\n    mounted() {\n\n      this.drawLine1().drawLine2().drawPie().drawLiquid().resizeChart();\n    }\n  }\n</script>\n\n<style scoped lang=\"less\">\n  .el-row {\n    margin-top: 20px;\n  }\n  .chart {\n    width: 100%;\n    height: 350px;\n    .border-radius(8px);\n    background-color: @boxBgColor;\n    box-shadow: 0 0 5px transparent;\n    &:hover {\n      box-shadow: 0 0 5px @mainColor;\n    }\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/page/EChartsComplex.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-row',[_c('el-col',{attrs:{\"span\":24}},[_c('div',{staticClass:\"chart\",attrs:{\"id\":\"line1\"}})])],1),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"chart\",attrs:{\"id\":\"liquid\"}})]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"chart\",attrs:{\"id\":\"line2\"}})]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"chart\",attrs:{\"id\":\"pie\"}})])],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ffa48e14\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/page/EChartsComplex.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ffa48e14\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!less-loader?{\\\"sourceMap\\\":true}!sass-resources-loader?{\\\"resources\\\":\\\"/Users/stauch/WebstormProjects/BPMN_guochun_you/src/assets/css/variable.less\\\"}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./EChartsComplex.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EChartsComplex.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EChartsComplex.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ffa48e14\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./EChartsComplex.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ffa48e14\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/page/EChartsComplex.vue\n// module id = null\n// module chunks = ","var completeDimensions = require('echarts/lib/data/helper/completeDimensions');\nvar echarts = require('echarts/lib/echarts');\n\necharts.extendSeriesModel({\n\n    type: 'series.liquidFill',\n\n    visualColorAccessPath: 'textStyle.normal.color',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = completeDimensions(['value'], option.data);\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    defaultOption: {\n        color: ['#294D99', '#156ACF', '#1598ED', '#45BDFF'],\n        center: ['50%', '50%'],\n        radius: '50%',\n        amplitude: '8%',\n        waveLength: '80%',\n        phase: 'auto',\n        period: 'auto',\n        direction: 'right',\n        shape: 'circle',\n\n        waveAnimation: true,\n        animationEasing: 'linear',\n        animationEasingUpdate: 'linear',\n        animationDuration: 2000,\n        animationDurationUpdate: 1000,\n\n        outline: {\n            show: true,\n            borderDistance: 8,\n            itemStyle: {\n                color: 'none',\n                borderColor: '#294D99',\n                borderWidth: 8,\n                shadowBlur: 20,\n                shadowColor: 'rgba(0, 0, 0, 0.25)'\n            }\n        },\n\n        backgroundStyle: {\n            color: '#E3F7FF'\n        },\n\n        itemStyle: {\n            opacity: 0.95,\n            shadowBlur: 50,\n            shadowColor: 'rgba(0, 0, 0, 0.4)'\n        },\n\n        label: {\n            show: true,\n            color: '#294D99',\n            insideColor: '#fff',\n            fontSize: 50,\n            fontWeight: 'bold',\n\n            align: 'center',\n            baseline: 'middle',\n            position: 'inside'\n        },\n\n        emphasis: {\n            itemStyle: {\n                opacity: 0.8\n            }\n        }\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts-liquidfill/src/liquidFillSeries.js\n// module id = f3i0\n// module chunks = 5","var echarts = require('echarts/lib/echarts');\nvar numberUtil = echarts.number;\nvar symbolUtil = require('echarts/lib/util/symbol');\nvar parsePercent = numberUtil.parsePercent;\n\nvar LiquidLayout = require('./liquidFillLayout');\n\nfunction getShallow(model, path) {\n    return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape\n                }, seriesModel);\n\n                waveElement.useStyle(style);\n\n                // instant changes\n                waveElement.position = newWave.position;\n                waveElement.setClipPath(newWave.clipPath);\n                waveElement.shape.inverse = newWave.inverse;\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (symbol.indexOf('path://') === 0) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.position = [-w / 2, -h / 2];\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return symbolUtil.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return symbolUtil.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidLayout({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                position: [cx, cy]\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n            echarts.graphic.setHoverStyle(wave, hoverStyle);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent',\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                },\n                silent: true\n            };\n\n            var outsideTextRect = new echarts.graphic.Rect(textOption);\n            var color = labelModel.get('color');\n            echarts.graphic.setText(outsideTextRect.style, labelModel, color);\n\n            var insideTextRect = new echarts.graphic.Rect(textOption);\n            var insColor = labelModel.get('insideColor');\n            echarts.graphic.setText(insideTextRect.style, labelModel, insColor);\n            insideTextRect.style.textFill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                position: [cx, cy]\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts-liquidfill/src/liquidFillView.js\n// module id = l0gW\n// module chunks = 5"],"sourceRoot":""}